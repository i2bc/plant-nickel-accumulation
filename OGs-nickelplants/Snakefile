#import os.path
#dir = "contigs"
#GENOMES = []
#	for f in dir:
			
GENOMES = ['Gpru', 'Grac', 'Hbet', 'Hkan', 'Mper', 'Nmon', 'Pcle', 'Pcos', 'Pgab','Pgra', 'Psem', 'Ncfi', 'Phco', 'Phlu',B2_contigs.fa]

AA_MIN = 49 # minimal length of ORFs in translate.pl
HMM_MAX_EVALUE =  1e-10 # maximal evalue of hmmscan hits for group addition (step one)
HMM_MIN_COVERAGE = 20 # minimal coverage for group addition (step two)

rule all:
	input:
		#OGs construction
		expand("OGs/hmm/{genome}.hmm", genome=GENOMES),
		expand("OGs/hmmdom/{genome}.hmm", genome=GENOMES),
		expand("OGs/hmmdom1e-10/{genome}.hmm", genome=GENOMES),
		"OGs/new_proteins_in_groups",
		# contigs translation
		expand("OGs/orf/{genome}.fa", genome=GENOMES),
		expand("OGs/proteome/{genome}.fa", genome=GENOMES),
		expand("OGs/oriented_contigs/{genome}.fa", genome=GENOMES),
		expand("OGs/orf_tab/{genome}.tab", genome=GENOMES)
			
# searches for ORFs on the 2 strands of contigs for each genome
rule search_orf:
	input:
		"OGs/contigs/{genome}.fa"	
	output:
		"OGs/oriented_contigs/{genome}.fa",
		"OGs/orf/{genome}.fa",
		"OGs/orf_tab/{genome}.tab",		
		"OGs/proteome/{genome}.fa",
		count=temp("reversed_sequences_{genome}")
	shell:
		"perl translate_genome.pl {AA_MIN} {input} > {output.count}"

# resume results	
rule count_reverse:
    input:
        rev=expand("reversed_sequences_{genome}", genome=GENOMES)
    output:
        "reversed_sequences"
    shell:
        "cat {input.rev} >> {output}" 

# run hmmscan with all proteomes against the model groups database 
rule hmmscan:
	input:
		database="OGs/mariodb/mariodatabase",
		fasta="OGs/proteome/{genome}.fa"
	output:
		hmm="OGs/hmm/{genome}.hmm",
		dom="OGs/hmmdom/{genome}.hmm" 
	shell:
		"hmmscan --cpu 25 --tblout {output.hmm} --domtblout {output.dom} {input.database} {input.fasta}"

# filter hmmscan results for evalue < HMM_MAX_EVALUE
rule evalue_cutoff:
	input:
		"OGs/hmmdom/{genome}.hmm"
	output:		
		"OGs/hmmdom1e-10/{genome}.hmm"		
	run:
		import sys
		sys.path.append("py_mods")
		import filter_hmmscan
		for f in input:
			filter_hmmscan.filter_dom_by_evalue(HMM_MAX_EVALUE, f, output[0])

# filter former results for protein coverage > HMM_MIN_COVERAGE
rule : 
	input:
		expand("OGs/hmmdom1e-10/{genome}.hmm", genome=GENOMES)
	output:		
		"OGs/new_proteins_in_groups"		
	run:
		import sys
		sys.path.append("py_mods")
		import filter_hmmscan
		for f in input:
			filter_hmmscan.add2group(HMM_MIN_COVERAGE, f, output[0])
			



		

			
				
		
		
		
		
		
